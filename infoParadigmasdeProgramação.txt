Paradigmas de Programação

Paradigmas de Programação: Varias maneiras de resolver o mesmo problema.

Existem 2 Paradigmas de Programação:
 Imperativo: Passo a Passo.
 Declarativo: Fazer algo sem saber como é feito.

Imperativo - descrição Passo a Passo.
 Imperativo: um comando de cada vez.

 Procedural: com funções, métodos, reaproveitamento de código.

 Estruturada: utilizando condicional, loop, breack, continue ( mais recomendado para sistemas pequenos ).

 Orientado a Objeto: trazer o mundo real para a programação -> classes, herança, polimorismo, encapslumaneto ( recomendado para maior parte dos sistemas principalmente sistemas grandes ).

Declarativo: fazer algo sem saber com é realizado internamente.
 Funcional: antiga, muito matemática, sem loop, sem For, utiliza método recurssivo, variáveis imutáveis => Mais Rápida.

 Lógica: Utilizada IA, SQL, HTML...

----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------

Paradigmas de Programação

Paradigma:
 Modelo ou Padrão a Seguir

Linguagem: Algumas linguagens são nativamente estruturada em algum Paradigma. Ex: Java -> OO.

Aprendizado => Nova Linguagem vs Novo Paradigma

Padrões Projeto => Padrões Arquiteturais => Pardigma

----------------------------------------------------------------

Paradigmas:

Funcional 1957 - Procedural 1968 - Orientado a Objeto 80/90

----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------

Quais são os paradigmas de programação mais importantes?


Os paradigmas de programação são, antes de tudo, um meio de qualificar a linguagem com base em sua funcionalidade. São atributos que expressam como uma linguagem funciona e também soluciona problemas.

Os paradigmas são classificados de acordo com as permissões sobre o que uma linguagem pode ou não fazer.

Existem inúmeros outros paradigmas de programação, mas neste artigo vamos focar no que é mais relevante de acordo com o mercado de trabalho.

Conteúdo   
1 O que é um paradigma de programação
2 Por que é importante aprender sobre paradigmas de programação?
3 Quais são os tipos de paradigmas?
3.1 Programação Procedural
3.2 Programação Orientada ao Objeto
3.3 Computação Paralela
3.4 Paradigma de Lógica de Programação
3.5 Programação Funcional

----------------------------------------------------------------

O que é um paradigma de programação
Um paradigma é um estilo de programação, um modelo, uma metodologia. Não se trata de uma linguagem, mas a forma como você soluciona problemas usando uma determinada linguagem de programação.

Existem muitas linguagens de programação conhecidas, mas todas elas precisam seguir algumas regras quando implementadas. E essas regras são os paradigmas.

Desta forma, quando uma nova linguagem de programação é desenvolvida, conforme suas peculiaridades, ela tende a se enquadrar em um paradigma ou até mesmo multiparadigma, como o JavaScript, por exemplo.

----------------------------------------------------------------

Por que é importante aprender sobre paradigmas de programação?
O primeiro ponto é que isso transforma você num desenvolvedor melhor, entendendo melhor sobre este tipo de teoria faz você pensar diretamente no design de código, você consegue ser capaz de entender melhor as linguagens, lendo nas entrelinhas dós códigos.

Outro ponto relevante é que adiciona uma vantagem competitiva para o seu perfil numa seletiva de emprego. Quando recrutadores ouvem que você domina o assunto, isso agrega ainda mais valor ao seu nome durante o processo gerando mais confiança na sua contratação.

----------------------------------------------------------------

Quais são os tipos de paradigmas?
Os principais paradigmas de programação basicamente pertencem a dois grupos, imperativos ou declarativos.

Imperativo

O programador instrui a máquina sobre como devem ser computados os processos. Dentro dos paradigmas de programação do tipo imperativo temos:

Programação Procedural
A programação procedural é excelente para programação de uso geral e consiste numa lista de instruções para informar ao computador o que fazer passo a passo.

A maioria das linguagens de programação ensinadas na faculdade são procedurais, exemplos:

C
C++
Java
Pascal

Quando é recomendado usar programação procedural:

Quando existir uma operação complexa que inclui dependências entre operações e quando há necessidade de visibilidade clara dos diferentes estados do aplicativo.
O programa é muito único e poucos elementos foram compartilhados.
O programa é estático e não se espera que mude muito ao longo do tempo.
Espera-se que nenhum ou apenas alguns recursos sejam adicionados ao projeto ao longo do tempo.

----------------------------------------------------------------

Programação Orientada ao Objeto

A programação orientada ao objeto (OOP) é o paradigma de programação mais popular devido aos seus benefícios, como a modularidade do código e a capacidade de associar diretamente problemas reais em termos de código.

Neste caso, o programa é escrito como uma coleção de classes e objetos para uma boa comunicação. A entidade menor e básica é objeto e todo tipo de cálculo é realizado apenas nos objetos.

É o paradigma mais popular e requisitado pelas empresas e as principais linguagens que o implementam são:

PHP
Java
Ruby
C#
Python
Vale a pena utilizá-la quando:

Vários programadores atuam juntos e não precisam entender tudo sobre cada componente.
Existe muito código a ser compartilhado e reutilizado.
São previstas muitas mudanças no projeto.

----------------------------------------------------------------

Computação Paralela

O paradigma de computação paralela consiste nas instruções sendo divididas entre vários processadores.

Um sistema de computação paralela permite que muitos processadores executem um programa em menos tempo, dividindo-os.

Linguagens que suportam a abordagem de processamento paralelo:

C
C++

A abordagem de computação paralela geralmente é recomendada quando:

Você tem um sistema que possui mais de uma CPU ou processadores multinúcleo.
É preciso resolver problemas computacionais que podem levar até dias para serem resolvidos.
Se trabalha com simulação computacional, inteligência artificial ou modelagem que exija muitos cálculos dinâmicos.

----------------------------------------------------------------

Declarativo

É quando o programador apenas declara as propriedades do resultado desejado, mas não informa a máquina sobre como devem ser feitos os cálculos relacionados. No grupo dos paradigmas de programação declarativos estão:

Paradigma de Lógica de Programação
O paradigma da programação com apontamento lógico não é composto de instruções. Ele é baseado em fatos e usa tudo o que sabe para criar um cenário onde todos esses fatos e cláusulas são verdadeiros e apontam para algum final.

Por exemplo, JavaScript é uma linguagem de programação, todas as linguagens de programação são importantes e, por dedução lógica, JavaScript é importante.

Linguagens com propriedades de lógica:

Absys
Ciao
Alice

É interessante usar o paradigma de programação lógica quando:

Você planeja trabalhar em projetos como prova de teoremas, sistemas de redução, sistemas de tipos entre outros.

----------------------------------------------------------------

Programação Funcional
O paradigma de programação funcional tem suas raízes na matemática e é independente da linguagem.

A base desse paradigma é a execução de uma série de funções matemáticas. Você compõe seu programa de funções curtas. Todo o código está dentro de uma função. Todas as variáveis têm escopo definido para a função.

No paradigma de programação funcional, as funções não modificam nenhum valor fora do escopo dessa função e as próprias funções não são afetadas por nenhum valor fora do escopo.

Falamos bastante do paradigma de programação funcional nesta GeekStream, inclusive é uma das coisas que o Gabriel Schade, da AWS, gostaria de ter aprendido no começo de sua carreira.

Linguagens que usam este paradigma:

Haskell
Scala
Racket
JavaScript

Ideal para usar quando:

Tem matemática envolvida diretemante na programação.
Os paradigmas de programação ajudam a reduzir a complexidade dos programas. Todo desenvolvedor deveria seguir uma abordagem de paradigma ao implementar seu código.

Vale pegar seus prós e contras, colocar numa balança e verificar qual é o ideal para o seu projeto.

----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
Estudo sobre Algotimos

Linguagem Natural vs Artificially

---------------------------------------------------

Visão Geral de Algoritimo
Visão Geral de Estrutura de Dados

---------------------------------------------------

Código Fonte
Criando Projeto

---------------------------------------------------

Coméntario de Código /**/

Sentença de Códigos ;

Bloco de Códigos {}

---------------------------------------------------
Operadores Aritméticos, Booleanos,  Lógicos

Tipagem Fraca vs Tipagem Forte

Visão Geral das Estruturas de Controle

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

Opções de operadores aritméticos

A tabela abaixo apresenta os operadores aritméticos da linguagem Java:

+ operador de adição
- operador subtração
* operador de multiplicação
/ operador de divisão
% operador de módulo (ou resto da divisão)

-------------------------------------------------------------------------------
Opções de operadores de igualdade

A tabela abaixo apresenta os operadores de igualdade do Java:

== Utilizado quando desejamos verificar se uma variável é igual a outra.
!= Utilizado quando desejamos verificar se uma variável é diferente de outra.

-------------------------------------------------------------------------------

Opções de operadores relacionais

A tabela abaixo apresenta os operadores relacionais do Java:

> Utilizado quando desejamos verificar se uma variável é maior que outra.
>= Utilizado quando desejamos verificar se uma variável é maior ou igual a outra
< Utilizado quando desejamos verificar se uma variável é menor que outra.
<= Utilizado quando desejamos verificar se uma variável é menor ou igual a outra.

-------------------------------------------------------------------------------

Opções de operadores de lógicos

A tabela abaixo apresenta os operadores lógicos do Java:

&& Utilizado quando desejamos que as duas expressões sejam verdadeiras.
|| Utilizado quando precisamos que pelo meno um das expressões seja verdadeira.

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

Estruturas de Controle

Estruturas de seleção
Estruturas de repetição

-------------------------------------------------------------------------------

if:

inteiro x = 4

se (x == 4) {
    escreva("x é igual a 4")
}


-------------------------------------------------------------------------------


if / else:

inteiro x = 4

se (x == 4) {
    escreva("x é igual a 4")
}
senao {
    escreva("x é diferente de 4")
}

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

for:

for (let controle = 1; controle <= 10; controle++) {
    console.log(controle);
}

console.log('Fim!');

--------------------------------

// for(;;) {
// }

// for(; true; ) {
// }

let controle = 1;

for (; controle <= 10;) {
    console.log(controle);
    controle++;
}

console.log('Fim!');

--------------------------------

// 7, 6, 5, 4, 3

for(let i = 7; i >= 3; i--) {
    console.log(i);
}

console.log('Fim!');

--------------------------------

// [1, 1] [1, 2] [1, 3]
// [2, 1] [2, 2] [2, 3]
// [3, 1] [3, 2] [3, 3]

for(let i = 1; i <= 3; i++) {
    let linha = '';
    for(let j = 1; j <= 3; j++) {
        linha += `[${i}, ${j}] `;
    }
    console.log(linha);
}

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------


while:

inteiro numero = 1
inteiro cuboNumero

enquanto (numero != 0) {
    escreva("Digite um número inteiro\n")
    leia(numero)
    cuboNumero = numero * numero * numero
    escreva("O cubo do número é ", cuboNumero, "\n")
}




-------------------------------------------------------------------------------

Do-while:

inteiro numero
inteiro cuboNumero

faca {
    escreva("Digite um número inteiro\n")
    leia(numero)
    cuboNumero = numero * numero * numero
    escreva("O cubo do número é ", cuboNumero, "\n")
} enquanto (numero != 0)

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------


switch:

inteiro titulos
leia(titulos)

escolha (titulos) {
    caso 0:
        escreva("Não ganhou nada")
        pare
    caso 1:
        escreva("Campeão")
        pare
    caso 2:
        escreva("Bicampeão")
        pare
    caso contrario:
        escreva("Mito")
}







-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

FUNÇÕES:

functions nomeFuncao()
{


 return;   
}


nomeFuncao;  -- chamada

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

ARRAYS:

//              0    1   2    3    4    5
const notas = [7.8, 6.7, 10, 9.5, 7.8, 5.8];

console.log(notas);
console.log(notas[3]);
console.log(notas[5]);
console.log(notas[10]);

notas[4] = 8.7;

console.log(notas);

---------------------------------

const nomes = [];

nomes[0] = "Pedro";
nomes[1] = "Ana";
nomes[2] = "Bia";
nomes[3] = "Gui";
nomes[4] = "Rebeca";
nomes[9] = "Tiago";

console.log(nomes);


---------------------------------

console.log(typeof console);
console.log(typeof console.log);

const numeros = [1, 2, 3];

console.log(typeof numeros);

numeros.push(4);
numeros.push(5);
numeros.push(10.98);

console.log(numeros);
console.log(numeros.length);

--------------------------------

const numeros = [1, 2, 356, 4, 5, 6, 11, 45];

for(let i = 0; i < numeros.length; i++) {
    console.log(numeros[i]);
}

for(let i = 1; i < numeros.length; i += 2) {
    console.log(numeros[i]);
}


---------------------------------

Metodos:

const numeros = [1, 2, 3, 4, 5, 8];

numeros[0] = 100;
numeros.push(6);

console.log(numeros.indexOf(4));
console.log(numeros.indexOf(4, 4));
console.log(numeros.includes(10));
console.log(numeros.includes(6));
console.log(numeros.join(' - '));
console.log(numeros);

const numeros2 = numeros.concat(7, 8, 9);
console.log(numeros2);

-----------------------------------

const numeros = [1, 2, 3, 4, 5, 8];

numeros.splice(1, 2);
console.log(numeros);

console.log(numeros.pop());
console.log(numeros.pop());
console.log(numeros);

-----------------------------------

const numeros = [10, 20, 30, 40];

function praCadaElemento(elemento, indice, array) {
    console.log(elemento, indice, array);
}

numeros.forEach(praCadaElemento);

numeros.forEach(function (el) {
    console.log(el);
});

numeros.forEach(function (_, i) {
    console.log(i);
});

// for(let n of numeros) {
//     console.log(n);
// }

// for (let i = 0; i < numeros.length; i++) {
//     console.log(numeros[i]);
// }


-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

OBJETOS:


-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------



-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------


Estudo sobre Algotimos

Linguagem Natural vs Artificially

---------------------------------------------------

Visão Geral de Algoritimo
Visão Geral de Estrutura de Dados

---------------------------------------------------

Código Fonte
Criando Projeto

---------------------------------------------------

Coméntario de Código /**/

Sentença de Códigos ;

Bloco de Códigos {}

---------------------------------------------------
Operadores Aritméticos, Booleanos,  Lógicos

Tipagem Fraca vs Tipagem Forte

Visão Geral das Estruturas de Controle

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

Opções de operadores aritméticos

A tabela abaixo apresenta os operadores aritméticos da linguagem Java:
+ operador de adição

- operador subtração

* operador de multiplicação

/ operador de divisão

% operador de módulo (ou resto da divisão)

-------------------------------------------------------------------------------
Opções de operadores de igualdade

A tabela abaixo apresenta os operadores de igualdade do Java:

== Utilizado quando desejamos verificar se uma variável é igual a outra.

!= Utilizado quando desejamos verificar se uma variável é diferente de outra.

-------------------------------------------------------------------------------

Opções de operadores relacionais

A tabela abaixo apresenta os operadores relacionais do Java:

> Utilizado quando desejamos verificar se uma variável é maior que outra.

>= Utilizado quando desejamos verificar se uma variável é maior ou igual a outra

< Utilizado quando desejamos verificar se uma variável é menor que outra.

<= Utilizado quando desejamos verificar se uma variável é menor ou igual a outra.

-------------------------------------------------------------------------------

Opções de operadores de lógicos

A tabela abaixo apresenta os operadores lógicos do Java:

&& Utilizado quando desejamos que as duas expressões sejam verdadeiras.

|| Utilizado quando precisamos que pelo meno um das expressões seja verdadeira.

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

Estruturas de Controle

Estruturas de seleção
Estruturas de repetição

-------------------------------------------------------------------------------

if:

inteiro x = 4

se (x == 4) {
    escreva("x é igual a 4")
}


-------------------------------------------------------------------------------


if / else:

inteiro x = 4

se (x == 4) {
    escreva("x é igual a 4")
}
senao {
    escreva("x é diferente de 4")
}

-------------------------------------------------------------------------------

for:





-------------------------------------------------------------------------------

while:

inteiro numero = 1
inteiro cuboNumero

enquanto (numero != 0) {
    escreva("Digite um número inteiro\n")
    leia(numero)
    cuboNumero = numero * numero * numero
    escreva("O cubo do número é ", cuboNumero, "\n")
}




-------------------------------------------------------------------------------

Do-while:

inteiro numero
inteiro cuboNumero

faca {
    escreva("Digite um número inteiro\n")
    leia(numero)
    cuboNumero = numero * numero * numero
    escreva("O cubo do número é ", cuboNumero, "\n")
} enquanto (numero != 0)

-------------------------------------------------------------------------------

switch:

inteiro titulos
leia(titulos)

escolha (titulos) {
    caso 0:
        escreva("Não ganhou nada")
        pare
    caso 1:
        escreva("Campeão")
        pare
    caso 2:
        escreva("Bicampeão")
        pare
    caso contrario:
        escreva("Mito")
}







-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

FUNÇÕES:

functions nomeFuncao()
{


 return;   
}


nomeFuncao;  -- chamada

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

ARRAYS:



-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

OBJETOS:


-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------



-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

